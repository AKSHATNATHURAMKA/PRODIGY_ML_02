# -*- coding: utf-8 -*-
"""CUSTOMER SEGMENTATION.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1poXRjbOVdb1jPRT63mDKTBH8CCPali24

IMPORTING THE DEPENDENCIES
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans

"""DATA COLLECTION AND ANALYSIS

"""

# LOADING THE DATA FROM CSV FILE TO A PANDAS DATAFRAME
customer_data = pd.read_csv('/content/Mall_Customers.csv')

# first 5 rows in the dataframe
customer_data.head()

#finding the number of rows and columns
customer_data.shape

# getting some information about thr dataset
customer_data.info()

#checking missing values
customer_data.isnull().sum()

"""choosing the annual income column and spending score column"""

X = customer_data.iloc[:,[3,4]].values

print(X)

"""CHOOSING THE NUMBER OF CLUSTERS

WCSS -> WITHIN CLUSTER SUM OF SQUARES
"""

# FINDING WCSS VALUE FOR DIFFERENT NUMBER OF CLUSTERS

wcss = []

for i in range(1,11):
  kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)
  kmeans.fit(X)

  wcss.append(kmeans.inertia_)

# plot an elbow graph

sns.set()
plt.plot(range(1,11), wcss)
plt.title('The Elbow Point Graph')
plt.xlabel('Number of Clusters')
plt.ylabel('WCSS')
plt.show()

"""OPTIMUM NUMBER OF CLUSTERS = 5

training the k means clustering model
"""

kmeans = KMeans(n_clusters=5, init='k-means++', random_state=0)

#return a label for each datapoint based on their cluster
y= kmeans.fit_predict(X)
print(y)

"""VISUALISING ALL THE CLUSTERS"""

# Plotting all the clusters and their centroids
plt.figure(figsize=(8,8))
plt.scatter(X[y == 0, 0], X[y == 0, 1], s = 50, c = 'green', label = 'cluster 1')
plt.scatter(X[y == 1, 0], X[y == 1, 1], s = 50, c = 'red', label = 'cluster 2')
plt.scatter(X[y == 2, 0], X[y == 2, 1], s = 50, c = 'blue', label = 'cluster 3')
plt.scatter(X[y == 3, 0], X[y == 3, 1], s = 50, c = 'black', label = 'cluster 4')
plt.scatter(X[y == 4, 0], X[y == 4, 1], s = 50, c = 'orange', label = 'cluster 5')

#plot the centroids
plt.scatter(kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1], s = 100, c = 'yellow', label = 'Centroids')

plt.title('Customer Groups')
plt.xlabel('Annual Income')
plt.ylabel('Spending Score')
plt.show()

